<?php
/* This file is part of the XP framework
 *
 * $Id$
 */

  define('BASE_URL',   'https://github.com/xp-framework/xp-runners/releases/download/v6.0.0/');

  // {{{ println(string* args)
  function println() {
    foreach (func_get_args() as $a) { echo $a; }
    echo PHP_EOL;
  }
  // }}}  

  // {{{ ardl(string proxy, string url, string targetdir)
  function ardl($proxy, $url, $targetdir, $permissions= -1) {
    static $pw= 10;
    static $headers= "User-Agent: xp-setup/6.0.0\r\nAccept: */*\r\n\r\n";

    do {
      if ($proxy) {
        println('---> ', $url, ' via ', $proxy);
        $u= parse_url($proxy);
        $request= sprintf(
          "GET %s%s HTTP/1.0\r\nHost: %s\r\n%s",
          $url,
          isset($u['query']) ? '?'.$u['query'] : '',
          $u['host'],
          $headers
        );
      } else {
        println('---> ', $url);
        $u= parse_url($url);
        $request= sprintf(
          "GET %s%s HTTP/1.0\r\nHost: %s\r\n%s",
          $u['path'],
          isset($u['query']) ? '?'.$u['query'] : '',
          $u['host'],
          $headers
        );
      }

      if ('https' === $u['scheme']) {
        $fd= fsockopen('ssl://'.$u['host'], isset($u['port']) ? $u['port'] : 443, $errno, $errstr);
      } else {
        $fd= fsockopen($u['host'], isset($u['port']) ? $u['port'] : 80, $errno, $errstr);
      }
      if (!$fd) {
        println('*** Failed (#', $errno, ': ', $errstr, ' ***');
        return FALSE;
      }

      // Send HTTP request
      fputs($fd, $request);
      
      // Read HTTP response
      $status= fgets($fd, 1024);
      sscanf($status, "HTTP/1.%*d %d %[^\r]", $code, $message);

      if (301 === $code || 302 === $code) {
        do {
          if (FALSE === ($header= fgets($fd, 1024))) return FALSE;
          if (0 === strncasecmp($header, 'Location: ', 10)) {
            $url= rtrim(substr($header, 10));
            continue 2;
          }
        } while ($header);
        println('*** Failed (Redirect without location, HTTP ', $code, ': ', $message, ' from ', $url, ') ***');
        return FALSE;
      } else if (200 === $code) {
        do {
          if (FALSE === ($header= fgets($fd, 1024))) return FALSE;
          if ('' === ($header= rtrim($header))) break;
        } while ($header);
      } else {
        println('*** Failed (HTTP ', $code, ': ', $message, ' from ', $url, ') ***');
        return FALSE;
      }
    } while (200 !== $code);

    while ($line= fgets($fd, 0xFF)) {
      if (2 != sscanf($line, '--%d:%[^:]--', $length, $filename)) continue;

      printf(
        '---> %s (%.2f kB) [%s]%s', 
        $filename, 
        $length / 1024,
        str_repeat('.', $pw),
        str_repeat("\x08", $pw+ 1)
      );

      $target= $targetdir.DIRECTORY_SEPARATOR.$filename;
      $ft= fopen($target, 'wb');
      if (!$ft) {
        println('*** I/O Error w/ ', $filename, ' ***');
        return FALSE;
      }
      
      $s= 0; $c= 0;
      while ($s < $length) {
        $s+= fwrite($ft, fread($fd, min(0x1000, $length- $s)));

        // Update progress
        $d= ceil(($s / $length) * $pw);
        if ($d == $c) continue;
        echo str_repeat('#', $d- $c); flush();
        $c= $d;
      }
      fclose($ft);

      // Change permissions if requested
      if (-1 != $permissions) {
        chmod($target, fileperms($target) | $permissions);
      }

      println();
    }
    fclose($fd);
    return TRUE;
  }
  // }}}
  
  // {{{ which(string command [, bool ext])
  function which($command, $ext= FALSE) {
    $search= explode(PATH_SEPARATOR, getenv('PATH'));
    $extensions= array('');
    $ext && $extensions+= explode(PATH_SEPARATOR, getenv('PATHEXT'));
    foreach ($search as $path) {
      foreach ($extensions as $ext) {
        if (file_exists($q= $path.DIRECTORY_SEPARATOR.$command.$ext)) return realpath($q);
      }
    }
    return NULL;
  }
  // }}}

  // {{{ inpath(string dir)
  function inpath($dir) {
    $realpath= realpath($dir);
    foreach (explode(PATH_SEPARATOR, getenv('PATH')) as $path) {
      if (realpath($path) == $realpath) return TRUE;
    }
    return FALSE;
  }
  // }}}

  // {{{ usage()
  function usage() {
    println('*** Usage: setup [-d <runner-dir>] [-p <proxy-url>] [-e <runner-env>]');
    println('- <runner-dir>: Path to where XP runners should be installed (default: $CWD)');
    println('- <proxy-url> : HTTP proxy to use (default: none), e.g. http://proxy.example.com:3128/');
    println('- <runner-env>: Runner environment to use (windows | unix, default: auto-detect)');
    return 1;
  }
  // }}}

  // {{{ main
  error_reporting(E_ALL);
  $runners= $proxy= NULL;
  $warnings= array();
  $uname= php_uname();
  $bin= getcwd();
  println('===> Setup xp runners @ ', $uname);

  // Parse command line arguments  
  for ($i= 0; $i < $argc; $i++) {
    switch ($argv[$i]) {
      case '-d': $bin= $argv[++$i]; break;
      case '-e': $runners= $argv[++$i]; break;
      case '-p': $proxy= $argv[++$i]; break;
      case '-?': case '--help': usage() && exit(1);
    }
  }
  if (!$bin) usage() && exit(1);

  // Runner path: Check whether "bin" exists and is in PATH
  if (!is_dir($bin)) {
    $warnings[]= 'Bindir '.$bin.' does not exist, created it for you';
  }
  if (!inpath($bin)) {
    $warnings[]= 'Bindir '.$bin.' is not in PATH, you might want to consider adding it!';
  }

  // Detect environment
  println('===> Environment');
  switch (TRUE) {
    case NULL !== $runners:
      break;
    
    case TRUE == preg_match('/^([A-Z]+)BSD/i', $uname):
      $runners= 'bsd';
      break;

    case TRUE == preg_match('/^Windows/i', $uname):
      $runners= 'windows';

      // Verify .NET version
      $d= dir(getenv('SYSTEMROOT').'/Microsoft.NET/Framework');
      $versions= array();
      while ($entry= $d->read()) {
        if (sscanf($entry, 'v%d.%d.%s', $major, $minor, $patch) > 1) {
          $versions[]= substr($entry, 1);
        }
      }
      $d->close();
      if (!version_compare(max($versions), '2.0', 'gt')) {
        println('*** .NET Framework 2.0 or greater required, found [', implode(', ', $versions), ']');
        exit(1);
      }
      break;
    
    default:
      $runners= 'unix';
      break;
  }
  println('---> Using ', $runners, ' runners');

  // Create directories
  foreach (array($bin) as $dir) {
    if (is_dir($dir)) continue;
    if (mkdir($dir)) continue;
    
    println('*** Failed to create directory ', $dir, ' ***');
    exit(1);
  }
  
  // Download runners
  ardl($proxy, BASE_URL.$runners.'.ar', $bin, 0700) || exit(3);
  
  // Check for xp.ini
  $config= $bin.DIRECTORY_SEPARATOR.'xp.ini';
  if (!file_exists($config)) {
    $fp= fopen($config, 'wb');
    fwrite($fp, 'use=[PLEASE EDIT "'.$config.'"]'.PHP_EOL);
    fwrite($fp, PHP_EOL);
    fclose($fp);
    $warnings[]= 'No configuration file found - created it for you';
    $warnings[]= 'Please edit '.$config;
  }
 
  // Print warnings
  if (!empty($warnings)) {
    println('===> Warnings:');
    foreach ($warnings as $warning) {
      println('!!! ', $warning);
    }
  }
  
  println('===> XP runners installed to the directory <'.$bin.'>');
  // }}}  
?>
